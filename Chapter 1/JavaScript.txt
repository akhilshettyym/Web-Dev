JavaScript: A Powerful Programming Language
JavaScript is a dynamically typed programming language used to give instructions to the computer, primarily for creating interactive web applications. It is widely used in both front-end (web development) and back-end (server-side with Node.js) programming.


The basic execution flow of JavaScript:
Input (JavaScript Code) ---> Computer Processes It ---> Output (Result on Screen)


Alerts in JavaScript
Alerts are used to display pop-up messages to users. The alert() function pauses script execution until the user dismisses it.

Example: alert("Hello there!");

Variables in JavaScript
Variables are containers for data that store values such as numbers, strings, and objects. They allow data to be reused and manipulated throughout the program.

Declaring Variables
JavaScript provides three ways to declare variables:

var – Old way (Function-scoped, avoid using)
let – Block-scoped, can be reassigned
const – Block-scoped, cannot be reassigned

let name = "Akhil";  // String
const pi = 3.14;     // Number (constant)
var isStudent = true; // Boolean


Assignment Operator (=)
The = operator is used to assign values to variables.
let age = 25; // Assigning 25 to the variable age


fullName - Camel case
fullname - x
full_name - x snake case
full-name - x kebab case
FullName - Pascal case


KEYWORDS :

Keywords in JavaScript: var, let, and const
JavaScript provides three keywords to declare variables: var, let, and const. Each has different behaviors in terms of scope, reassignability, and hoisting.

1️⃣ var (Function-Scoped, Avoid Using)
Introduced in ES5 (old JavaScript).
Function-scoped: Accessible anywhere inside the function where it's declared.
-- Can be re-declared and updated in the same scope.

var age = 21;
var age = 59;
var age = 86;
console.log(age); // Output: 86   this shouldn't happen
Here three times the variable is created.
Hoisted but initialized as undefined, which can cause unexpected behavior.
- var is not used - 2015 before that ES5. old version.
After ES5 led to ES6 we stopped using ES5. that is var.


2️⃣ let (Block-Scoped, Preferred for Reassignable Variables)
Introduced in ES6 (Modern JavaScript).
Block-scoped: Only accessible inside {} where it is defined.
Can be updated, but cannot be re-declared in the same scope.
Hoisted but not initialized (accessing before declaration causes an error).

Then came with let and const.
let age = 21;
age = 86;
age = 59;
console.log(age); // Error  
here the variable is one and the value gets updated.


3️⃣ const (Block-Scoped, Best for Constants)
Introduced in ES6 (Modern JavaScript).
Block-scoped: Like let, it's restricted to {} where it's defined.
Cannot be updated or re-declared.
Hoisted but not initialized.

const age = 24;
age = 86;
age = 59;
console.log(age);

Not possible its fixed and cannot be changed.