JavaScript Execution Context & Call Stack Explained
What is an Execution Context?
An execution context is the environment where JavaScript code runs. It consists of:

Global Execution Context (GEC) ‚Äì Created when a JavaScript file is executed.
Function Execution Context (FEC) ‚Äì Created whenever a function is called.
Eval Execution Context ‚Äì Created when eval() is used (rarely used in modern JS).
How JavaScript Code Executes (Two Phases)
Whenever JavaScript code runs, it follows two phases:

Memory Creation Phase (Creation Phase)

Allocates memory for variables and functions.
Variables are initialized with undefined.
Functions store their entire definition.
Execution Phase

Assigns values to variables.
Executes functions by creating new execution contexts.

Example: Execution Context Breakdown

let val1 = 10;
let val2 = 20;

function addNum(num1, num2) {
    let sum = num1 + num2;
    return sum;
}
let result1 = addNum(val1, val2);
let result2 = addNum(10, 2);

Step-by-Step Execution
1. Global Execution Context (GEC) is created
The global object (window in browsers, global in Node.js) is created.
this keyword is assigned to the global object.
The call stack starts with the global execution context.


2. Memory Creation Phase (First Cycle)
Variable/Function	Value in Memory
val1	undefined
val2	undefined
addNum	Function definition
result1	undefined
result2	undefined


3. Execution Phase
Variable/Function	Value Assigned
val1	10
val2	20
result1	Calls addNum(10, 20), stores return value 30
result2	Calls addNum(10, 2), stores return value 12
Function Execution Context (FEC) for addNum(10, 20)
Step 1: Memory Creation Phase

Variable	Value in Memory
num1	undefined
num2	undefined
sum	undefined
Step 2: Execution Phase

Variable	Value Assigned
num1	10
num2	20
sum	30 (returned to GEC)
üîπ After function execution, its execution context is deleted from the stack.

Call Stack Visualization
txt
Copy
Edit
|---------------|
| Global (GEC)  |  ‚Üê Starts first
|---------------|
| addNum(10, 20)|  ‚Üê Pushed when function is called
|---------------|
| addNum(10, 2) |  ‚Üê New function call, new execution context
|---------------|
‚úîÔ∏è Once a function completes execution, its context is popped off the stack.

Key Takeaways
‚úÖ JavaScript runs in two phases (Memory Creation & Execution).
‚úÖ Each function call creates a new execution context.
‚úÖ Execution contexts are stored in a Call Stack, and removed once execution finishes.
‚úÖ JavaScript follows synchronous single-threaded execution, meaning one task at a time.

Summary
The global execution context (GEC) is created first.
Functions create new execution contexts that are added to the call stack.
After execution, the function context is removed from the stack.
JavaScript executes synchronously, but we can use asynchronous techniques (e.g., Promises, async/await) to handle long-running tasks.